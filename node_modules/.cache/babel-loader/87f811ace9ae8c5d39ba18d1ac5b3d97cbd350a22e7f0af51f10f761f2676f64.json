{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processedSignatures] = useState(new Set());\n  const getTokenInfo = async mintAddress => {\n    try {\n      const response = await fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mintAccounts: [mintAddress],\n          includeOffChain: true,\n          disableCache: false\n        })\n      });\n      const tokenData = await response.json();\n      if (tokenData && tokenData[0]) {\n        return {\n          address: mintAddress,\n          symbol: tokenData[0].symbol || 'Unknown',\n          name: tokenData[0].name || 'Unknown Token',\n          amount: 0\n        };\n      }\n    } catch (error) {\n      console.error('Error fetching token info:', error);\n    }\n    return null;\n  };\n  const monitorTransactions = useCallback(async () => {\n    try {\n      setLoading(true);\n      const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f', 'confirmed');\n      const programPublicKey = new PublicKey(programId);\n      const signatures = await connection.getSignaturesForAddress(programPublicKey, {\n        limit: 10\n      });\n      const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\n      if (newSignatures.length === 0) {\n        setLoading(false);\n        return;\n      }\n      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n      const txs = [];\n      for (const sig of newSignatures) {\n        try {\n          await delay(500);\n          const tx = await connection.getParsedTransaction(sig.signature, {\n            maxSupportedTransactionVersion: 0,\n            commitment: 'confirmed'\n          });\n          if (tx !== null && tx !== void 0 && tx.meta && tx.blockTime) {\n            let inputToken;\n            let outputToken;\n            for (const instruction of tx.transaction.message.instructions) {\n              const parsedInstruction = instruction;\n              if ('program' in parsedInstruction && parsedInstruction.program === 'spl-token' && 'parsed' in parsedInstruction) {\n                const {\n                  type,\n                  info\n                } = parsedInstruction.parsed;\n                if (type === 'transferChecked' || type === 'transfer') {\n                  const tokenInfo = await getTokenInfo(info.mint);\n                  if (tokenInfo) {\n                    var _info$tokenAmount;\n                    tokenInfo.amount = ((_info$tokenAmount = info.tokenAmount) === null || _info$tokenAmount === void 0 ? void 0 : _info$tokenAmount.uiAmount) || 0;\n                    if (!inputToken) {\n                      inputToken = tokenInfo;\n                    } else if (!outputToken) {\n                      outputToken = tokenInfo;\n                    }\n                  }\n                }\n              }\n            }\n            if (inputToken || outputToken) {\n              var _tx$meta;\n              txs.push({\n                signature: sig.signature,\n                timestamp: tx.blockTime,\n                status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? '失败' : '成功',\n                inputToken,\n                outputToken\n              });\n              processedSignatures.add(sig.signature);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching transaction:', sig.signature, error);\n        }\n      }\n      setTransactions(prevTxs => [...txs, ...prevTxs]);\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [programId, processedSignatures]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u4EA4\\u6613\\u76D1\\u63A7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: monitorTransactions,\n        disabled: loading,\n        className: \"refresh-button\",\n        children: loading ? '加载中...' : '刷新'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6682\\u65E0\\u4EA4\\u6613\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this) : transactions.map(tx => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u65F6\\u95F4: \", new Date(tx.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u72B6\\u6001: \", tx.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"swap-info\",\n          children: [tx.inputToken && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u652F\\u4ED8: \", tx.inputToken.amount, \" \", tx.inputToken.symbol, \" (\", tx.inputToken.address, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this), tx.outputToken && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u83B7\\u5F97: \", tx.outputToken.amount, \" \", tx.outputToken.symbol, \" (\", tx.outputToken.address, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"signature\",\n          children: [\"\\u4EA4\\u6613\\u7B7E\\u540D: \", tx.signature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this)]\n      }, tx.signature, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"mySf0a57V0OVc/TSpgvsFbn4csg=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useCallback","Connection","PublicKey","jsxDEV","_jsxDEV","TransactionMonitor","programId","_s","transactions","setTransactions","loading","setLoading","processedSignatures","Set","getTokenInfo","mintAddress","response","fetch","method","headers","body","JSON","stringify","mintAccounts","includeOffChain","disableCache","tokenData","json","address","symbol","name","amount","error","console","monitorTransactions","connection","programPublicKey","signatures","getSignaturesForAddress","limit","newSignatures","filter","sig","has","signature","length","delay","ms","Promise","resolve","setTimeout","txs","tx","getParsedTransaction","maxSupportedTransactionVersion","commitment","meta","blockTime","inputToken","outputToken","instruction","transaction","message","instructions","parsedInstruction","program","type","info","parsed","tokenInfo","mint","_info$tokenAmount","tokenAmount","uiAmount","_tx$meta","push","timestamp","status","err","add","prevTxs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","Date","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n  ParsedInstruction,\r\n  PartiallyDecodedInstruction,\r\n} from '@solana/web3.js';\r\n\r\ninterface TokenInfo {\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  amount: number;\r\n}\r\n\r\ninterface Transaction {\r\n  signature: string;\r\n  timestamp: number;\r\n  status: string;\r\n  inputToken?: TokenInfo;\r\n  outputToken?: TokenInfo;\r\n}\r\n\r\ninterface SPLTokenInstruction {\r\n  program: string;\r\n  parsed: {\r\n    type: string;\r\n    info: {\r\n      mint: string;\r\n      tokenAmount: {\r\n        uiAmount: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [processedSignatures] = useState<Set<string>>(new Set());\r\n\r\n  const getTokenInfo = async (mintAddress: string) => {\r\n    try {\r\n      const response = await fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          mintAccounts: [mintAddress],\r\n          includeOffChain: true,\r\n          disableCache: false\r\n        })\r\n      });\r\n      \r\n      const tokenData = await response.json();\r\n      if (tokenData && tokenData[0]) {\r\n        return {\r\n          address: mintAddress,\r\n          symbol: tokenData[0].symbol || 'Unknown',\r\n          name: tokenData[0].name || 'Unknown Token',\r\n          amount: 0\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching token info:', error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const monitorTransactions = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const connection = new Connection(\r\n        'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f',\r\n        'confirmed'\r\n      );\r\n\r\n      const programPublicKey = new PublicKey(programId);\r\n      \r\n      const signatures = await connection.getSignaturesForAddress(\r\n        programPublicKey,\r\n        { limit: 10 }\r\n      );\r\n\r\n      const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\r\n      \r\n      if (newSignatures.length === 0) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n      const txs: Transaction[] = [];\r\n\r\n      for (const sig of newSignatures) {\r\n        try {\r\n          await delay(500);\r\n          const tx = await connection.getParsedTransaction(\r\n            sig.signature,\r\n            {\r\n              maxSupportedTransactionVersion: 0,\r\n              commitment: 'confirmed'\r\n            }\r\n          );\r\n          \r\n          if (tx?.meta && tx.blockTime) {\r\n            let inputToken: TokenInfo | undefined;\r\n            let outputToken: TokenInfo | undefined;\r\n\r\n            for (const instruction of tx.transaction.message.instructions) {\r\n              const parsedInstruction = instruction as ParsedInstruction;\r\n              if ('program' in parsedInstruction && \r\n                  parsedInstruction.program === 'spl-token' && \r\n                  'parsed' in parsedInstruction) {\r\n                const { type, info } = parsedInstruction.parsed;\r\n                \r\n                if (type === 'transferChecked' || type === 'transfer') {\r\n                  const tokenInfo = await getTokenInfo(info.mint);\r\n                  if (tokenInfo) {\r\n                    tokenInfo.amount = info.tokenAmount?.uiAmount || 0;\r\n                    \r\n                    if (!inputToken) {\r\n                      inputToken = tokenInfo;\r\n                    } else if (!outputToken) {\r\n                      outputToken = tokenInfo;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            if (inputToken || outputToken) {\r\n              txs.push({\r\n                signature: sig.signature,\r\n                timestamp: tx.blockTime,\r\n                status: tx.meta?.err ? '失败' : '成功',\r\n                inputToken,\r\n                outputToken\r\n              });\r\n              processedSignatures.add(sig.signature);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching transaction:', sig.signature, error);\r\n        }\r\n      }\r\n\r\n      setTransactions(prevTxs => [...txs, ...prevTxs]);\r\n    } catch (error) {\r\n      console.error('Error fetching transactions:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [programId, processedSignatures]);\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <div className=\"monitor-header\">\r\n        <h2>交易监控</h2>\r\n        <button \r\n          onClick={monitorTransactions} \r\n          disabled={loading}\r\n          className=\"refresh-button\"\r\n        >\r\n          {loading ? '加载中...' : '刷新'}\r\n        </button>\r\n      </div>\r\n      <div className=\"transactions-list\">\r\n        {transactions.length === 0 ? (\r\n          <p>暂无交易</p>\r\n        ) : (\r\n          transactions.map((tx) => (\r\n            <div key={tx.signature} className=\"transaction-item\">\r\n              <p>时间: {new Date(tx.timestamp * 1000).toLocaleString()}</p>\r\n              <p>状态: {tx.status}</p>\r\n              <div className=\"swap-info\">\r\n                {tx.inputToken && (\r\n                  <p>支付: {tx.inputToken.amount} {tx.inputToken.symbol} ({tx.inputToken.address})</p>\r\n                )}\r\n                {tx.outputToken && (\r\n                  <p>获得: {tx.outputToken.amount} {tx.outputToken.symbol} ({tx.outputToken.address})</p>\r\n                )}\r\n              </div>\r\n              <p className=\"signature\">交易签名: {tx.signature}</p>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}