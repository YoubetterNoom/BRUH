{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // 使用 Helius RPC 端点\n    const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f', {\n      commitment: 'confirmed',\n      // 添加最大支持的交易版本\n      maxSupportedTransactionVersion: 0\n    });\n    const parseTransaction = tx => {\n      var _tx$meta;\n      if (!tx.meta || !tx.blockTime) return null;\n      const instructions = tx.transaction.message.instructions.map(instruction => {\n        if (instruction.program) {\n          var _instruction$parsed;\n          return `Program: ${instruction.program}, Type: ${((_instruction$parsed = instruction.parsed) === null || _instruction$parsed === void 0 ? void 0 : _instruction$parsed.type) || 'Unknown'}`;\n        }\n        return `Program ID: ${instruction.programId.toString()}`;\n      });\n      return {\n        signature: tx.transaction.signatures[0],\n        timestamp: tx.blockTime,\n        instructions,\n        status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? '失败' : '成功'\n      };\n    };\n    const monitorTransactions = async () => {\n      try {\n        setLoading(true);\n        const programPublicKey = new PublicKey(programId);\n        console.log('Fetching signatures for program:', programId);\n        const signatures = await connection.getSignaturesForAddress(programPublicKey, {\n          limit: 10\n        } // 减少请求数量以避免超出限制\n        );\n        console.log('Found signatures:', signatures.length);\n\n        // 添加延迟以避免请求过快\n        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n        const txs = [];\n        for (const sig of signatures) {\n          try {\n            await delay(500); // 每次请求之间添加500ms延迟\n            const tx = await connection.getParsedTransaction(sig.signature, {\n              maxSupportedTransactionVersion: 0\n            });\n            console.log('Transaction:', sig.signature, tx ? 'found' : 'not found');\n            if (tx) txs.push(tx);\n          } catch (error) {\n            console.error('Error fetching transaction:', sig.signature, error);\n          }\n        }\n        const parsedTxs = txs.map(parseTransaction).filter(tx => tx !== null);\n        console.log('Parsed transactions:', parsedTxs.length);\n        setTransactions(parsedTxs);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    monitorTransactions();\n    const interval = setInterval(monitorTransactions, 30000); // 增加刷新间隔到30秒\n\n    return () => clearInterval(interval);\n  }, [programId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u4EA4\\u6613\\u76D1\\u63A7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u52A0\\u8F7D\\u4E2D...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6682\\u65E0\\u4EA4\\u6613\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this) : transactions.map((tx, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u7B7E\\u540D: \", tx.signature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u65F6\\u95F4: \", new Date(tx.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u72B6\\u6001: \", tx.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6307\\u4EE4:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: tx.instructions.map((instruction, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: instruction\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"TyP27iYvJjbRZitheACbowk3YWM=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useEffect","Connection","PublicKey","jsxDEV","_jsxDEV","TransactionMonitor","programId","_s","transactions","setTransactions","loading","setLoading","connection","commitment","maxSupportedTransactionVersion","parseTransaction","tx","_tx$meta","meta","blockTime","instructions","transaction","message","map","instruction","program","_instruction$parsed","parsed","type","toString","signature","signatures","timestamp","status","err","monitorTransactions","programPublicKey","console","log","getSignaturesForAddress","limit","length","delay","ms","Promise","resolve","setTimeout","txs","sig","getParsedTransaction","push","error","parsedTxs","filter","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","Date","toLocaleString","i","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n} from '@solana/web3.js';\r\n\r\ninterface Transaction {\r\n  signature: string;\r\n  timestamp: number;\r\n  instructions: string[];\r\n  status: string;\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // 使用 Helius RPC 端点\r\n    const connection = new Connection(\r\n      'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f',\r\n      {\r\n        commitment: 'confirmed',\r\n        // 添加最大支持的交易版本\r\n        maxSupportedTransactionVersion: 0\r\n      }\r\n    );\r\n    \r\n    const parseTransaction = (tx: ParsedTransactionWithMeta): Transaction | null => {\r\n      if (!tx.meta || !tx.blockTime) return null;\r\n\r\n      const instructions = tx.transaction.message.instructions.map((instruction: any) => {\r\n        if (instruction.program) {\r\n          return `Program: ${instruction.program}, Type: ${instruction.parsed?.type || 'Unknown'}`;\r\n        }\r\n        return `Program ID: ${instruction.programId.toString()}`;\r\n      });\r\n\r\n      return {\r\n        signature: tx.transaction.signatures[0],\r\n        timestamp: tx.blockTime,\r\n        instructions,\r\n        status: tx.meta?.err ? '失败' : '成功'\r\n      };\r\n    };\r\n\r\n    const monitorTransactions = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const programPublicKey = new PublicKey(programId);\r\n        \r\n        console.log('Fetching signatures for program:', programId);\r\n        \r\n        const signatures = await connection.getSignaturesForAddress(\r\n          programPublicKey,\r\n          { limit: 10 } // 减少请求数量以避免超出限制\r\n        );\r\n\r\n        console.log('Found signatures:', signatures.length);\r\n\r\n        // 添加延迟以避免请求过快\r\n        const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n        const txs = [];\r\n        for (const sig of signatures) {\r\n          try {\r\n            await delay(500); // 每次请求之间添加500ms延迟\r\n            const tx = await connection.getParsedTransaction(sig.signature, {\r\n              maxSupportedTransactionVersion: 0\r\n            });\r\n            console.log('Transaction:', sig.signature, tx ? 'found' : 'not found');\r\n            if (tx) txs.push(tx);\r\n          } catch (error) {\r\n            console.error('Error fetching transaction:', sig.signature, error);\r\n          }\r\n        }\r\n\r\n        const parsedTxs = txs\r\n          .map(parseTransaction)\r\n          .filter((tx): tx is Transaction => tx !== null);\r\n\r\n        console.log('Parsed transactions:', parsedTxs.length);\r\n        setTransactions(parsedTxs);\r\n      } catch (error) {\r\n        console.error('Error fetching transactions:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    monitorTransactions();\r\n    const interval = setInterval(monitorTransactions, 30000); // 增加刷新间隔到30秒\r\n\r\n    return () => clearInterval(interval);\r\n  }, [programId]);\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <h2>交易监控</h2>\r\n      {loading ? (\r\n        <p>加载中...</p>\r\n      ) : (\r\n        <div className=\"transactions-list\">\r\n          {transactions.length === 0 ? (\r\n            <p>暂无交易</p>\r\n          ) : (\r\n            transactions.map((tx, index) => (\r\n              <div key={index} className=\"transaction-item\">\r\n                <p>签名: {tx.signature}</p>\r\n                <p>时间: {new Date(tx.timestamp * 1000).toLocaleString()}</p>\r\n                <p>状态: {tx.status}</p>\r\n                <div className=\"instructions\">\r\n                  <p>指令:</p>\r\n                  <ul>\r\n                    {tx.instructions.map((instruction, i) => (\r\n                      <li key={i}>{instruction}</li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}