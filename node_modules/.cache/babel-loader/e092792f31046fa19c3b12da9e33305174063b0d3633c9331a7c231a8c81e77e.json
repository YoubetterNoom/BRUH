{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processedSignatures] = useState(new Set());\n  useEffect(() => {\n    const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f', 'confirmed');\n    const parseTransaction = async tx => {\n      var _tx$meta;\n      if (!tx.meta || !tx.blockTime) return null;\n      const tokens = [];\n      let fromWallet = '';\n      let toWallet = '';\n      for (const instruction of tx.transaction.message.instructions) {\n        if (instruction.program === 'spl-token' && instruction.parsed) {\n          const {\n            type,\n            info\n          } = instruction.parsed;\n          if (type === 'transferChecked' || type === 'transfer') {\n            fromWallet = info.authority || info.source;\n            toWallet = info.destination;\n            try {\n              // 获取代币信息\n              const tokenAddress = info.mint;\n              const response = await fetch(`https://api.helius.xyz/v0/tokens?api-key=426605eb-af73-410a-af26-0dc37714935f`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  mintAccounts: [tokenAddress]\n                })\n              });\n              const tokenData = await response.json();\n              if (tokenData && tokenData[0]) {\n                var _info$tokenAmount;\n                tokens.push({\n                  address: tokenAddress,\n                  symbol: tokenData[0].symbol || 'Unknown',\n                  name: tokenData[0].name || 'Unknown Token',\n                  amount: ((_info$tokenAmount = info.tokenAmount) === null || _info$tokenAmount === void 0 ? void 0 : _info$tokenAmount.uiAmount) || 0\n                });\n              }\n            } catch (error) {\n              console.error('Error fetching token info:', error);\n            }\n          }\n        }\n      }\n      const instructions = tx.transaction.message.instructions.map(instruction => {\n        if (instruction.program) {\n          var _instruction$parsed;\n          return `Program: ${instruction.program}, Type: ${((_instruction$parsed = instruction.parsed) === null || _instruction$parsed === void 0 ? void 0 : _instruction$parsed.type) || 'Unknown'}`;\n        }\n        return `Program ID: ${instruction.programId.toString()}`;\n      });\n      return {\n        signature: tx.transaction.signatures[0],\n        timestamp: tx.blockTime,\n        instructions,\n        status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? '失败' : '成功',\n        tokens,\n        fromWallet,\n        toWallet\n      };\n    };\n    const monitorTransactions = async () => {\n      try {\n        setLoading(true);\n        const programPublicKey = new PublicKey(programId);\n        const signatures = await connection.getSignaturesForAddress(programPublicKey, {\n          limit: 10\n        });\n        const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\n        if (newSignatures.length === 0) {\n          setLoading(false);\n          return;\n        }\n        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n        const txs = [];\n        for (const sig of newSignatures) {\n          try {\n            await delay(500);\n            const tx = await connection.getParsedTransaction(sig.signature, {\n              maxSupportedTransactionVersion: 0,\n              commitment: 'confirmed'\n            });\n            if (tx) {\n              const parsedTx = await parseTransaction(tx);\n              if (parsedTx) {\n                txs.push(parsedTx);\n                processedSignatures.add(sig.signature);\n              }\n            }\n          } catch (error) {\n            console.error('Error fetching transaction:', sig.signature, error);\n          }\n        }\n        setTransactions(prevTxs => [...txs, ...prevTxs]);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    monitorTransactions();\n    const interval = setInterval(monitorTransactions, 30000);\n    return () => clearInterval(interval);\n  }, [programId, processedSignatures]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u4EA4\\u6613\\u76D1\\u63A7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u52A0\\u8F7D\\u4E2D...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6682\\u65E0\\u4EA4\\u6613\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : transactions.map((tx, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u7B7E\\u540D: \", tx.signature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u65F6\\u95F4: \", new Date(tx.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u72B6\\u6001: \", tx.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this), tx.tokens.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tokens-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u4EE3\\u5E01\\u4FE1\\u606F:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 19\n          }, this), tx.tokens.map((token, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u540D\\u79F0: \", token.name, \" (\", token.symbol, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u6570\\u91CF: \", token.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u4EE3\\u5E01\\u5730\\u5740: \", token.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 23\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u53D1\\u9001\\u65B9: \", tx.fromWallet]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u63A5\\u6536\\u65B9: \", tx.toWallet]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6307\\u4EE4:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: tx.instructions.map((instruction, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: instruction\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this)]\n      }, tx.signature, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"5Iyy37hAxWoNWd3B+GOpm6AEPl4=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useEffect","Connection","PublicKey","jsxDEV","_jsxDEV","TransactionMonitor","programId","_s","transactions","setTransactions","loading","setLoading","processedSignatures","Set","connection","parseTransaction","tx","_tx$meta","meta","blockTime","tokens","fromWallet","toWallet","instruction","transaction","message","instructions","program","parsed","type","info","authority","source","destination","tokenAddress","mint","response","fetch","method","headers","body","JSON","stringify","mintAccounts","tokenData","json","_info$tokenAmount","push","address","symbol","name","amount","tokenAmount","uiAmount","error","console","map","_instruction$parsed","toString","signature","signatures","timestamp","status","err","monitorTransactions","programPublicKey","getSignaturesForAddress","limit","newSignatures","filter","sig","has","length","delay","ms","Promise","resolve","setTimeout","txs","getParsedTransaction","maxSupportedTransactionVersion","commitment","parsedTx","add","prevTxs","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","Date","toLocaleString","token","i","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n} from '@solana/web3.js';\r\n\r\ninterface TokenInfo {\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  amount: number;\r\n}\r\n\r\ninterface Transaction {\r\n  signature: string;\r\n  timestamp: number;\r\n  instructions: string[];\r\n  status: string;\r\n  tokens: TokenInfo[];\r\n  fromWallet: string;\r\n  toWallet: string;\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [processedSignatures] = useState<Set<string>>(new Set());\r\n\r\n  useEffect(() => {\r\n    const connection = new Connection(\r\n      'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f',\r\n      'confirmed'\r\n    );\r\n    \r\n    const parseTransaction = async (tx: ParsedTransactionWithMeta): Promise<Transaction | null> => {\r\n      if (!tx.meta || !tx.blockTime) return null;\r\n\r\n      const tokens: TokenInfo[] = [];\r\n      let fromWallet = '';\r\n      let toWallet = '';\r\n\r\n      for (const instruction of tx.transaction.message.instructions) {\r\n        if (instruction.program === 'spl-token' && instruction.parsed) {\r\n          const { type, info } = instruction.parsed;\r\n          \r\n          if (type === 'transferChecked' || type === 'transfer') {\r\n            fromWallet = info.authority || info.source;\r\n            toWallet = info.destination;\r\n            \r\n            try {\r\n              // 获取代币信息\r\n              const tokenAddress = info.mint;\r\n              const response = await fetch(`https://api.helius.xyz/v0/tokens?api-key=426605eb-af73-410a-af26-0dc37714935f`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ mintAccounts: [tokenAddress] })\r\n              });\r\n              \r\n              const tokenData = await response.json();\r\n              if (tokenData && tokenData[0]) {\r\n                tokens.push({\r\n                  address: tokenAddress,\r\n                  symbol: tokenData[0].symbol || 'Unknown',\r\n                  name: tokenData[0].name || 'Unknown Token',\r\n                  amount: info.tokenAmount?.uiAmount || 0\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error('Error fetching token info:', error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      const instructions = tx.transaction.message.instructions.map((instruction: any) => {\r\n        if (instruction.program) {\r\n          return `Program: ${instruction.program}, Type: ${instruction.parsed?.type || 'Unknown'}`;\r\n        }\r\n        return `Program ID: ${instruction.programId.toString()}`;\r\n      });\r\n\r\n      return {\r\n        signature: tx.transaction.signatures[0],\r\n        timestamp: tx.blockTime,\r\n        instructions,\r\n        status: tx.meta?.err ? '失败' : '成功',\r\n        tokens,\r\n        fromWallet,\r\n        toWallet\r\n      };\r\n    };\r\n\r\n    const monitorTransactions = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const programPublicKey = new PublicKey(programId);\r\n        \r\n        const signatures = await connection.getSignaturesForAddress(\r\n          programPublicKey,\r\n          { limit: 10 }\r\n        );\r\n\r\n        const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\r\n        \r\n        if (newSignatures.length === 0) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n        const txs = [];\r\n\r\n        for (const sig of newSignatures) {\r\n          try {\r\n            await delay(500);\r\n            const tx = await connection.getParsedTransaction(\r\n              sig.signature,\r\n              {\r\n                maxSupportedTransactionVersion: 0,\r\n                commitment: 'confirmed'\r\n              }\r\n            );\r\n            if (tx) {\r\n              const parsedTx = await parseTransaction(tx);\r\n              if (parsedTx) {\r\n                txs.push(parsedTx);\r\n                processedSignatures.add(sig.signature);\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching transaction:', sig.signature, error);\r\n          }\r\n        }\r\n\r\n        setTransactions(prevTxs => [...txs, ...prevTxs]);\r\n      } catch (error) {\r\n        console.error('Error fetching transactions:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    monitorTransactions();\r\n    const interval = setInterval(monitorTransactions, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [programId, processedSignatures]);\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <h2>交易监控</h2>\r\n      {loading && <p>加载中...</p>}\r\n      <div className=\"transactions-list\">\r\n        {transactions.length === 0 ? (\r\n          <p>暂无交易</p>\r\n        ) : (\r\n          transactions.map((tx, index) => (\r\n            <div key={tx.signature} className=\"transaction-item\">\r\n              <p>签名: {tx.signature}</p>\r\n              <p>时间: {new Date(tx.timestamp * 1000).toLocaleString()}</p>\r\n              <p>状态: {tx.status}</p>\r\n              {tx.tokens.length > 0 && (\r\n                <div className=\"tokens-info\">\r\n                  <p>代币信息:</p>\r\n                  {tx.tokens.map((token, i) => (\r\n                    <div key={i} className=\"token-details\">\r\n                      <p>名称: {token.name} ({token.symbol})</p>\r\n                      <p>数量: {token.amount}</p>\r\n                      <p>代币地址: {token.address}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              <p>发送方: {tx.fromWallet}</p>\r\n              <p>接收方: {tx.toWallet}</p>\r\n              <div className=\"instructions\">\r\n                <p>指令:</p>\r\n                <ul>\r\n                  {tx.instructions.map((instruction, i) => (\r\n                    <li key={i}>{instruction}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}