{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processedSignatures] = useState(new Set());\n  const [processedTokens] = useState(new Set());\n  const getTokenInfo = async mintAddress => {\n    try {\n      const response = await fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mintAccounts: [mintAddress],\n          includeOffChain: true,\n          disableCache: false\n        })\n      });\n      const tokenData = await response.json();\n      if (tokenData && tokenData[0]) {\n        return {\n          address: mintAddress,\n          symbol: tokenData[0].symbol || 'Unknown',\n          name: tokenData[0].name || 'Unknown Token',\n          amount: 0\n        };\n      }\n    } catch (error) {\n      console.error('Error fetching token info:', error);\n    }\n    return null;\n  };\n  const getProgramName = instruction => {\n    if ('programId' in instruction) {\n      return instruction.programId.toString();\n    }\n    return 'Unknown';\n  };\n  const monitorTransactions = useCallback(async () => {\n    if (loading) return;\n    try {\n      setLoading(true);\n      const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f', 'confirmed');\n      const programPublicKey = new PublicKey(programId);\n\n      // 计算10小时前的时间戳\n      const tenHoursAgo = Math.floor((Date.now() - 10 * 60 * 60 * 1000) / 1000);\n\n      // 获取所有签名，直到找到10小时前的交易\n      let allSignatures = [];\n      let lastSignature = undefined;\n      while (true) {\n        const options = {\n          before: lastSignature,\n          limit: 1000\n        };\n        const signatures = await connection.getSignaturesForAddress(programPublicKey, options);\n        if (signatures.length === 0) break;\n\n        // 检查最后一个签名的时间\n        const lastTx = signatures[signatures.length - 1];\n        if (lastTx.blockTime && lastTx.blockTime < tenHoursAgo) {\n          // 只保留10小时内的签名\n          const recentSignatures = signatures.filter(sig => sig.blockTime && sig.blockTime >= tenHoursAgo);\n          allSignatures = [...allSignatures, ...recentSignatures];\n          break;\n        }\n        allSignatures = [...allSignatures, ...signatures];\n        lastSignature = signatures[signatures.length - 1].signature;\n\n        // 添加延迟以避免请求过快\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      console.log(`Found ${allSignatures.length} transactions in the last 10 hours`);\n\n      // 过滤掉已处理的签名\n      const newSignatures = allSignatures.filter(sig => !processedSignatures.has(sig.signature));\n      if (newSignatures.length === 0) {\n        setLoading(false);\n        return;\n      }\n      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n      const processedTokens = new Set();\n      const newTransactions = [];\n      for (const sig of newSignatures) {\n        try {\n          await delay(100); // 减少延迟以加快处理速度\n          const tx = await connection.getParsedTransaction(sig.signature, {\n            maxSupportedTransactionVersion: 0,\n            commitment: 'confirmed'\n          });\n          if (tx !== null && tx !== void 0 && tx.meta && tx.blockTime) {\n            const preTokenBalances = tx.meta.preTokenBalances || [];\n            const postTokenBalances = tx.meta.postTokenBalances || [];\n            const changedTokens = Array.from(new Set([...preTokenBalances.map(b => b.mint), ...postTokenBalances.map(b => b.mint)])).filter(mint => !processedTokens.has(mint));\n            if (changedTokens.length === 0) continue;\n            const tokenInfos = [];\n            for (const mint of changedTokens) {\n              if (!mint) continue;\n              const tokenInfo = await getTokenInfo(mint);\n              if (tokenInfo) {\n                var _preTokenBalances$fin, _postTokenBalances$fi;\n                const preBal = ((_preTokenBalances$fin = preTokenBalances.find(b => b.mint === mint)) === null || _preTokenBalances$fin === void 0 ? void 0 : _preTokenBalances$fin.uiTokenAmount.uiAmount) || 0;\n                const postBal = ((_postTokenBalances$fi = postTokenBalances.find(b => b.mint === mint)) === null || _postTokenBalances$fi === void 0 ? void 0 : _postTokenBalances$fi.uiTokenAmount.uiAmount) || 0;\n                const change = postBal - preBal;\n                tokenInfos.push({\n                  ...tokenInfo,\n                  amount: Math.abs(change),\n                  isInput: change < 0\n                });\n                processedTokens.add(mint);\n              }\n            }\n            if (tokenInfos.length > 0) {\n              var _tx$meta;\n              const inputTokens = tokenInfos.filter(t => t.isInput);\n              const outputTokens = tokenInfos.filter(t => !t.isInput);\n              const newTx = {\n                signature: sig.signature,\n                timestamp: tx.blockTime,\n                status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? 'Failed' : 'Success',\n                inputToken: inputTokens[0],\n                outputToken: outputTokens[0],\n                programName: getProgramName(tx.transaction.message.instructions[0])\n              };\n              newTransactions.push(newTx);\n              processedSignatures.add(sig.signature);\n            }\n          }\n        } catch (error) {\n          console.error('Error processing transaction:', sig.signature, error);\n        }\n      }\n      if (newTransactions.length > 0) {\n        setTransactions(prevTxs => {\n          // 按时间戳排序，最新的在前面\n          const allTxs = [...newTransactions, ...prevTxs];\n          return allTxs.sort((a, b) => b.timestamp - a.timestamp);\n        });\n      }\n    } catch (error) {\n      console.error('Error in monitorTransactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [programId, processedSignatures, loading]);\n  useEffect(() => {\n    setTransactions([]);\n    processedSignatures.clear();\n    processedTokens.clear();\n    monitorTransactions();\n    const interval = setInterval(monitorTransactions, 10000);\n    return () => clearInterval(interval);\n  }, [programId]);\n  const openPhotonLink = tokenAddress => {\n    window.open(`https://photon-sol.tinyastro.io/en/lp/${tokenAddress}`, '_blank');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Transaction Monitor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"subtitle\",\n          children: \"Real-time Solana transaction tracking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"refresh-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: monitorTransactions,\n          disabled: loading,\n          className: \"refresh-button\",\n          children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this), \"Loading\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"refresh-icon\",\n              children: \"\\u21BB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), \"Manual Refresh\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-transactions\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No transactions found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hint\",\n          children: \"Click refresh to check for new transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this) : transactions.map(tx => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transaction-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timestamp\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"label\",\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this), new Date(tx.timestamp * 1000).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status ${tx.status === '成功' ? 'success' : 'failed'}`,\n            children: tx.status === '成功' ? 'Success' : 'Failed'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"swap-info\",\n          children: [tx.inputToken && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-info input-token\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"token-amount\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label\",\n                children: \"Paid:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"amount\",\n                children: tx.inputToken.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"symbol\",\n                children: tx.inputToken.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"photon-link-button\",\n              onClick: () => openPhotonLink(tx.inputToken.address),\n              children: [\"View on Photon LP\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"address\",\n                children: [\"(\", tx.inputToken.address, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 19\n          }, this), tx.outputToken && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-info output-token\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"token-amount\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label\",\n                children: \"Received:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"amount\",\n                children: tx.outputToken.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"symbol\",\n                children: tx.outputToken.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"photon-link-button\",\n              onClick: () => openPhotonLink(tx.outputToken.address),\n              children: [\"View on Photon LP\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"address\",\n                children: [\"(\", tx.outputToken.address, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this), tx.programName && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"program-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"label\",\n            children: \"Program:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 19\n          }, this), tx.programName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"signature\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"label\",\n            children: \"Transaction Signature:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value\",\n            children: tx.signature\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this)]\n      }, tx.signature, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"fVYx5IDAE3PS62RwEfZ3pThIk4o=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useCallback","useEffect","Connection","PublicKey","jsxDEV","_jsxDEV","Fragment","_Fragment","TransactionMonitor","programId","_s","transactions","setTransactions","loading","setLoading","processedSignatures","Set","processedTokens","getTokenInfo","mintAddress","response","fetch","method","headers","body","JSON","stringify","mintAccounts","includeOffChain","disableCache","tokenData","json","address","symbol","name","amount","error","console","getProgramName","instruction","toString","monitorTransactions","connection","programPublicKey","tenHoursAgo","Math","floor","Date","now","allSignatures","lastSignature","undefined","options","before","limit","signatures","getSignaturesForAddress","length","lastTx","blockTime","recentSignatures","filter","sig","signature","Promise","resolve","setTimeout","log","newSignatures","has","delay","ms","newTransactions","tx","getParsedTransaction","maxSupportedTransactionVersion","commitment","meta","preTokenBalances","postTokenBalances","changedTokens","Array","from","map","b","mint","tokenInfos","tokenInfo","_preTokenBalances$fin","_postTokenBalances$fi","preBal","find","uiTokenAmount","uiAmount","postBal","change","push","abs","isInput","add","_tx$meta","inputTokens","t","outputTokens","newTx","timestamp","status","err","inputToken","outputToken","programName","transaction","message","instructions","prevTxs","allTxs","sort","a","clear","interval","setInterval","clearInterval","openPhotonLink","tokenAddress","window","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n  ParsedInstruction,\r\n  PartiallyDecodedInstruction,\r\n  ConfirmedSignatureInfo,\r\n  SignaturesForAddressOptions\r\n} from '@solana/web3.js';\r\n\r\ninterface TokenInfo {\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  amount: number;\r\n  isInput?: boolean;\r\n}\r\n\r\ninterface Transaction {\r\n  signature: string;\r\n  timestamp: number;\r\n  status: string;\r\n  inputToken?: TokenInfo;\r\n  outputToken?: TokenInfo;\r\n  programName?: string;\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [processedSignatures] = useState<Set<string>>(new Set());\r\n  const [processedTokens] = useState<Set<string>>(new Set());\r\n\r\n  const getTokenInfo = async (mintAddress: string) => {\r\n    try {\r\n      const response = await fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          mintAccounts: [mintAddress],\r\n          includeOffChain: true,\r\n          disableCache: false\r\n        })\r\n      });\r\n      \r\n      const tokenData = await response.json();\r\n      if (tokenData && tokenData[0]) {\r\n        return {\r\n          address: mintAddress,\r\n          symbol: tokenData[0].symbol || 'Unknown',\r\n          name: tokenData[0].name || 'Unknown Token',\r\n          amount: 0\r\n        } as TokenInfo;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching token info:', error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getProgramName = (instruction: ParsedInstruction | PartiallyDecodedInstruction): string => {\r\n    if ('programId' in instruction) {\r\n      return instruction.programId.toString();\r\n    }\r\n    return 'Unknown';\r\n  };\r\n\r\n  const monitorTransactions = useCallback(async () => {\r\n    if (loading) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const connection = new Connection(\r\n        'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f',\r\n        'confirmed'\r\n      );\r\n\r\n      const programPublicKey = new PublicKey(programId);\r\n      \r\n      // 计算10小时前的时间戳\r\n      const tenHoursAgo = Math.floor((Date.now() - 10 * 60 * 60 * 1000) / 1000);\r\n      \r\n      // 获取所有签名，直到找到10小时前的交易\r\n      let allSignatures: ConfirmedSignatureInfo[] = [];\r\n      let lastSignature: string | undefined = undefined;\r\n      \r\n      while (true) {\r\n        const options: SignaturesForAddressOptions = {\r\n          before: lastSignature,\r\n          limit: 1000\r\n        };\r\n\r\n        const signatures: ConfirmedSignatureInfo[] = await connection.getSignaturesForAddress(\r\n          programPublicKey,\r\n          options\r\n        );\r\n\r\n        if (signatures.length === 0) break;\r\n\r\n        // 检查最后一个签名的时间\r\n        const lastTx = signatures[signatures.length - 1];\r\n        if (lastTx.blockTime && lastTx.blockTime < tenHoursAgo) {\r\n          // 只保留10小时内的签名\r\n          const recentSignatures = signatures.filter(\r\n            (sig: ConfirmedSignatureInfo) => sig.blockTime && sig.blockTime >= tenHoursAgo\r\n          );\r\n          allSignatures = [...allSignatures, ...recentSignatures];\r\n          break;\r\n        }\r\n\r\n        allSignatures = [...allSignatures, ...signatures];\r\n        lastSignature = signatures[signatures.length - 1].signature;\r\n        \r\n        // 添加延迟以避免请求过快\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n\r\n      console.log(`Found ${allSignatures.length} transactions in the last 10 hours`);\r\n\r\n      // 过滤掉已处理的签名\r\n      const newSignatures = allSignatures.filter(sig => !processedSignatures.has(sig.signature));\r\n      \r\n      if (newSignatures.length === 0) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n      const processedTokens = new Set<string>();\r\n      const newTransactions: Transaction[] = [];\r\n\r\n      for (const sig of newSignatures) {\r\n        try {\r\n          await delay(100); // 减少延迟以加快处理速度\r\n          const tx = await connection.getParsedTransaction(\r\n            sig.signature,\r\n            {\r\n              maxSupportedTransactionVersion: 0,\r\n              commitment: 'confirmed'\r\n            }\r\n          );\r\n\r\n          if (tx?.meta && tx.blockTime) {\r\n            const preTokenBalances = tx.meta.preTokenBalances || [];\r\n            const postTokenBalances = tx.meta.postTokenBalances || [];\r\n            \r\n            const changedTokens = Array.from(new Set([\r\n              ...preTokenBalances.map(b => b.mint),\r\n              ...postTokenBalances.map(b => b.mint)\r\n            ])).filter(mint => !processedTokens.has(mint));\r\n\r\n            if (changedTokens.length === 0) continue;\r\n\r\n            const tokenInfos: TokenInfo[] = [];\r\n            \r\n            for (const mint of changedTokens) {\r\n              if (!mint) continue;\r\n              const tokenInfo = await getTokenInfo(mint);\r\n              if (tokenInfo) {\r\n                const preBal = preTokenBalances.find(b => b.mint === mint)?.uiTokenAmount.uiAmount || 0;\r\n                const postBal = postTokenBalances.find(b => b.mint === mint)?.uiTokenAmount.uiAmount || 0;\r\n                const change = postBal - preBal;\r\n                \r\n                tokenInfos.push({\r\n                  ...tokenInfo,\r\n                  amount: Math.abs(change),\r\n                  isInput: change < 0\r\n                });\r\n                \r\n                processedTokens.add(mint);\r\n              }\r\n            }\r\n\r\n            if (tokenInfos.length > 0) {\r\n              const inputTokens = tokenInfos.filter(t => t.isInput);\r\n              const outputTokens = tokenInfos.filter(t => !t.isInput);\r\n\r\n              const newTx: Transaction = {\r\n                signature: sig.signature,\r\n                timestamp: tx.blockTime,\r\n                status: tx.meta?.err ? 'Failed' : 'Success',\r\n                inputToken: inputTokens[0],\r\n                outputToken: outputTokens[0],\r\n                programName: getProgramName(tx.transaction.message.instructions[0])\r\n              };\r\n\r\n              newTransactions.push(newTx);\r\n              processedSignatures.add(sig.signature);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing transaction:', sig.signature, error);\r\n        }\r\n      }\r\n\r\n      if (newTransactions.length > 0) {\r\n        setTransactions(prevTxs => {\r\n          // 按时间戳排序，最新的在前面\r\n          const allTxs = [...newTransactions, ...prevTxs];\r\n          return allTxs.sort((a, b) => b.timestamp - a.timestamp);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in monitorTransactions:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [programId, processedSignatures, loading]);\r\n\r\n  useEffect(() => {\r\n    setTransactions([]);\r\n    processedSignatures.clear();\r\n    processedTokens.clear();\r\n    monitorTransactions();\r\n    \r\n    const interval = setInterval(monitorTransactions, 10000);\r\n    return () => clearInterval(interval);\r\n  }, [programId]);\r\n\r\n  const openPhotonLink = (tokenAddress: string) => {\r\n    window.open(`https://photon-sol.tinyastro.io/en/lp/${tokenAddress}`, '_blank');\r\n  };\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <div className=\"monitor-header\">\r\n        <div className=\"title-section\">\r\n          <h2>Transaction Monitor</h2>\r\n          <span className=\"subtitle\">Real-time Solana transaction tracking</span>\r\n        </div>\r\n        <div className=\"refresh-container\">\r\n          <button \r\n            onClick={monitorTransactions} \r\n            disabled={loading}\r\n            className=\"refresh-button\"\r\n          >\r\n            {loading ? (\r\n              <>\r\n                <span className=\"loading-spinner\"></span>\r\n                Loading\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"refresh-icon\">↻</span>\r\n                Manual Refresh\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"transactions-list\">\r\n        {transactions.length === 0 ? (\r\n          <div className=\"no-transactions\">\r\n            <p>No transactions found</p>\r\n            <span className=\"hint\">Click refresh to check for new transactions</span>\r\n          </div>\r\n        ) : (\r\n          transactions.map((tx) => (\r\n            <div key={tx.signature} className=\"transaction-item\">\r\n              <div className=\"transaction-header\">\r\n                <div className=\"timestamp\">\r\n                  <span className=\"label\">Time:</span>\r\n                  {new Date(tx.timestamp * 1000).toLocaleString()}\r\n                </div>\r\n                <div className={`status ${tx.status === '成功' ? 'success' : 'failed'}`}>\r\n                  {tx.status === '成功' ? 'Success' : 'Failed'}\r\n                </div>\r\n              </div>\r\n              <div className=\"swap-info\">\r\n                {tx.inputToken && (\r\n                  <div className=\"token-info input-token\">\r\n                    <div className=\"token-amount\">\r\n                      <span className=\"label\">Paid:</span>\r\n                      <span className=\"amount\">{tx.inputToken.amount}</span>\r\n                      <span className=\"symbol\">{tx.inputToken.symbol}</span>\r\n                    </div>\r\n                    <button \r\n                      className=\"photon-link-button\"\r\n                      onClick={() => openPhotonLink(tx.inputToken!.address)}\r\n                    >\r\n                      View on Photon LP\r\n                      <span className=\"address\">({tx.inputToken.address})</span>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n                {tx.outputToken && (\r\n                  <div className=\"token-info output-token\">\r\n                    <div className=\"token-amount\">\r\n                      <span className=\"label\">Received:</span>\r\n                      <span className=\"amount\">{tx.outputToken.amount}</span>\r\n                      <span className=\"symbol\">{tx.outputToken.symbol}</span>\r\n                    </div>\r\n                    <button \r\n                      className=\"photon-link-button\"\r\n                      onClick={() => openPhotonLink(tx.outputToken!.address)}\r\n                    >\r\n                      View on Photon LP\r\n                      <span className=\"address\">({tx.outputToken.address})</span>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {tx.programName && (\r\n                <div className=\"program-name\">\r\n                  <span className=\"label\">Program:</span>\r\n                  {tx.programName}\r\n                </div>\r\n              )}\r\n              <div className=\"signature\">\r\n                <span className=\"label\">Transaction Signature:</span>\r\n                <span className=\"value\">{tx.signature}</span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}