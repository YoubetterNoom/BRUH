{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processedSignatures] = useState(new Set());\n  const getTokenInfo = async mintAddress => {\n    try {\n      console.log('Fetching token info for:', mintAddress);\n      const response = await fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mintAccounts: [mintAddress],\n          includeOffChain: true,\n          disableCache: false\n        })\n      });\n      const tokenData = await response.json();\n      console.log('Token data received:', tokenData);\n      if (tokenData && tokenData[0]) {\n        return {\n          address: mintAddress,\n          symbol: tokenData[0].symbol || 'Unknown',\n          name: tokenData[0].name || 'Unknown Token',\n          amount: 0\n        };\n      }\n    } catch (error) {\n      console.error('Error fetching token info:', error);\n    }\n    return null;\n  };\n  const monitorTransactions = useCallback(async () => {\n    try {\n      setLoading(true);\n      console.log('Starting transaction monitoring for program:', programId);\n      const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f', 'confirmed');\n      const programPublicKey = new PublicKey(programId);\n      console.log('Fetching signatures...');\n      const signatures = await connection.getSignaturesForAddress(programPublicKey, {\n        limit: 10\n      });\n      console.log('Found signatures:', signatures.length);\n      console.log('Signatures:', signatures.map(sig => sig.signature));\n      const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\n      console.log('New signatures:', newSignatures.length);\n      if (newSignatures.length === 0) {\n        console.log('No new transactions found');\n        setLoading(false);\n        return;\n      }\n      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n      const txs = [];\n      for (const sig of newSignatures) {\n        try {\n          console.log('Processing signature:', sig.signature);\n          await delay(500);\n          const tx = await connection.getParsedTransaction(sig.signature, {\n            maxSupportedTransactionVersion: 0,\n            commitment: 'confirmed'\n          });\n          if (tx !== null && tx !== void 0 && tx.meta && tx.blockTime) {\n            console.log('Transaction found:', sig.signature);\n            let inputToken;\n            let outputToken;\n            console.log('Instructions:', tx.transaction.message.instructions);\n            for (const instruction of tx.transaction.message.instructions) {\n              console.log('Processing instruction:', instruction);\n              const parsedInstruction = instruction;\n              if ('program' in parsedInstruction && parsedInstruction.program === 'spl-token' && 'parsed' in parsedInstruction) {\n                console.log('Found SPL token instruction:', parsedInstruction.parsed);\n                const {\n                  type,\n                  info\n                } = parsedInstruction.parsed;\n                if (type === 'transferChecked' || type === 'transfer') {\n                  console.log('Found token transfer:', info);\n                  const tokenInfo = await getTokenInfo(info.mint);\n                  if (tokenInfo) {\n                    var _info$tokenAmount;\n                    tokenInfo.amount = ((_info$tokenAmount = info.tokenAmount) === null || _info$tokenAmount === void 0 ? void 0 : _info$tokenAmount.uiAmount) || 0;\n                    if (!inputToken) {\n                      inputToken = tokenInfo;\n                      console.log('Set input token:', tokenInfo);\n                    } else if (!outputToken) {\n                      outputToken = tokenInfo;\n                      console.log('Set output token:', tokenInfo);\n                    }\n                  }\n                }\n              }\n            }\n            if (inputToken || outputToken) {\n              var _tx$meta;\n              const newTx = {\n                signature: sig.signature,\n                timestamp: tx.blockTime,\n                status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? '失败' : '成功',\n                inputToken,\n                outputToken\n              };\n              console.log('Adding new transaction:', newTx);\n              txs.push(newTx);\n              processedSignatures.add(sig.signature);\n            } else {\n              console.log('No token transfers found in transaction');\n            }\n          } else {\n            console.log('Transaction not found or invalid');\n          }\n        } catch (error) {\n          console.error('Error processing transaction:', sig.signature, error);\n        }\n      }\n      console.log('New transactions to add:', txs.length);\n      if (txs.length > 0) {\n        setTransactions(prevTxs => {\n          console.log('Previous transactions:', prevTxs.length);\n          const newTxs = [...txs, ...prevTxs];\n          console.log('Updated transactions:', newTxs.length);\n          return newTxs;\n        });\n      }\n    } catch (error) {\n      console.error('Error in monitorTransactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [programId, processedSignatures]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u4EA4\\u6613\\u76D1\\u63A7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: monitorTransactions,\n        disabled: loading,\n        className: \"refresh-button\",\n        children: loading ? '加载中...' : '刷新'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6682\\u65E0\\u4EA4\\u6613\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this) : transactions.map(tx => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u65F6\\u95F4: \", new Date(tx.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u72B6\\u6001: \", tx.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"swap-info\",\n          children: [tx.inputToken && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u652F\\u4ED8: \", tx.inputToken.amount, \" \", tx.inputToken.symbol, \" (\", tx.inputToken.address, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 19\n          }, this), tx.outputToken && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u83B7\\u5F97: \", tx.outputToken.amount, \" \", tx.outputToken.symbol, \" (\", tx.outputToken.address, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"signature\",\n          children: [\"\\u4EA4\\u6613\\u7B7E\\u540D: \", tx.signature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)]\n      }, tx.signature, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"mySf0a57V0OVc/TSpgvsFbn4csg=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useCallback","Connection","PublicKey","jsxDEV","_jsxDEV","TransactionMonitor","programId","_s","transactions","setTransactions","loading","setLoading","processedSignatures","Set","getTokenInfo","mintAddress","console","log","response","fetch","method","headers","body","JSON","stringify","mintAccounts","includeOffChain","disableCache","tokenData","json","address","symbol","name","amount","error","monitorTransactions","connection","programPublicKey","signatures","getSignaturesForAddress","limit","length","map","sig","signature","newSignatures","filter","has","delay","ms","Promise","resolve","setTimeout","txs","tx","getParsedTransaction","maxSupportedTransactionVersion","commitment","meta","blockTime","inputToken","outputToken","transaction","message","instructions","instruction","parsedInstruction","program","parsed","type","info","tokenInfo","mint","_info$tokenAmount","tokenAmount","uiAmount","_tx$meta","newTx","timestamp","status","err","push","add","prevTxs","newTxs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Date","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n  ParsedInstruction,\r\n  PartiallyDecodedInstruction,\r\n} from '@solana/web3.js';\r\n\r\ninterface TokenInfo {\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  amount: number;\r\n}\r\n\r\ninterface Transaction {\r\n  signature: string;\r\n  timestamp: number;\r\n  status: string;\r\n  inputToken?: TokenInfo;\r\n  outputToken?: TokenInfo;\r\n}\r\n\r\ninterface SPLTokenInstruction {\r\n  program: string;\r\n  parsed: {\r\n    type: string;\r\n    info: {\r\n      mint: string;\r\n      tokenAmount: {\r\n        uiAmount: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [processedSignatures] = useState<Set<string>>(new Set());\r\n\r\n  const getTokenInfo = async (mintAddress: string) => {\r\n    try {\r\n      console.log('Fetching token info for:', mintAddress);\r\n      const response = await fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          mintAccounts: [mintAddress],\r\n          includeOffChain: true,\r\n          disableCache: false\r\n        })\r\n      });\r\n      \r\n      const tokenData = await response.json();\r\n      console.log('Token data received:', tokenData);\r\n      \r\n      if (tokenData && tokenData[0]) {\r\n        return {\r\n          address: mintAddress,\r\n          symbol: tokenData[0].symbol || 'Unknown',\r\n          name: tokenData[0].name || 'Unknown Token',\r\n          amount: 0\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching token info:', error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const monitorTransactions = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('Starting transaction monitoring for program:', programId);\r\n\r\n      const connection = new Connection(\r\n        'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f',\r\n        'confirmed'\r\n      );\r\n\r\n      const programPublicKey = new PublicKey(programId);\r\n      \r\n      console.log('Fetching signatures...');\r\n      const signatures = await connection.getSignaturesForAddress(\r\n        programPublicKey,\r\n        { limit: 10 }\r\n      );\r\n\r\n      console.log('Found signatures:', signatures.length);\r\n      console.log('Signatures:', signatures.map(sig => sig.signature));\r\n\r\n      const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\r\n      console.log('New signatures:', newSignatures.length);\r\n      \r\n      if (newSignatures.length === 0) {\r\n        console.log('No new transactions found');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n      const txs: Transaction[] = [];\r\n\r\n      for (const sig of newSignatures) {\r\n        try {\r\n          console.log('Processing signature:', sig.signature);\r\n          await delay(500);\r\n          const tx = await connection.getParsedTransaction(\r\n            sig.signature,\r\n            {\r\n              maxSupportedTransactionVersion: 0,\r\n              commitment: 'confirmed'\r\n            }\r\n          );\r\n          \r\n          if (tx?.meta && tx.blockTime) {\r\n            console.log('Transaction found:', sig.signature);\r\n            let inputToken: TokenInfo | undefined;\r\n            let outputToken: TokenInfo | undefined;\r\n\r\n            console.log('Instructions:', tx.transaction.message.instructions);\r\n            \r\n            for (const instruction of tx.transaction.message.instructions) {\r\n              console.log('Processing instruction:', instruction);\r\n              \r\n              const parsedInstruction = instruction as ParsedInstruction;\r\n              if ('program' in parsedInstruction && \r\n                  parsedInstruction.program === 'spl-token' && \r\n                  'parsed' in parsedInstruction) {\r\n                console.log('Found SPL token instruction:', parsedInstruction.parsed);\r\n                const { type, info } = parsedInstruction.parsed;\r\n                \r\n                if (type === 'transferChecked' || type === 'transfer') {\r\n                  console.log('Found token transfer:', info);\r\n                  const tokenInfo = await getTokenInfo(info.mint);\r\n                  if (tokenInfo) {\r\n                    tokenInfo.amount = info.tokenAmount?.uiAmount || 0;\r\n                    \r\n                    if (!inputToken) {\r\n                      inputToken = tokenInfo;\r\n                      console.log('Set input token:', tokenInfo);\r\n                    } else if (!outputToken) {\r\n                      outputToken = tokenInfo;\r\n                      console.log('Set output token:', tokenInfo);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            if (inputToken || outputToken) {\r\n              const newTx = {\r\n                signature: sig.signature,\r\n                timestamp: tx.blockTime,\r\n                status: tx.meta?.err ? '失败' : '成功',\r\n                inputToken,\r\n                outputToken\r\n              };\r\n              console.log('Adding new transaction:', newTx);\r\n              txs.push(newTx);\r\n              processedSignatures.add(sig.signature);\r\n            } else {\r\n              console.log('No token transfers found in transaction');\r\n            }\r\n          } else {\r\n            console.log('Transaction not found or invalid');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing transaction:', sig.signature, error);\r\n        }\r\n      }\r\n\r\n      console.log('New transactions to add:', txs.length);\r\n      if (txs.length > 0) {\r\n        setTransactions(prevTxs => {\r\n          console.log('Previous transactions:', prevTxs.length);\r\n          const newTxs = [...txs, ...prevTxs];\r\n          console.log('Updated transactions:', newTxs.length);\r\n          return newTxs;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in monitorTransactions:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [programId, processedSignatures]);\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <div className=\"monitor-header\">\r\n        <h2>交易监控</h2>\r\n        <button \r\n          onClick={monitorTransactions} \r\n          disabled={loading}\r\n          className=\"refresh-button\"\r\n        >\r\n          {loading ? '加载中...' : '刷新'}\r\n        </button>\r\n      </div>\r\n      <div className=\"transactions-list\">\r\n        {transactions.length === 0 ? (\r\n          <p>暂无交易</p>\r\n        ) : (\r\n          transactions.map((tx) => (\r\n            <div key={tx.signature} className=\"transaction-item\">\r\n              <p>时间: {new Date(tx.timestamp * 1000).toLocaleString()}</p>\r\n              <p>状态: {tx.status}</p>\r\n              <div className=\"swap-info\">\r\n                {tx.inputToken && (\r\n                  <p>支付: {tx.inputToken.amount} {tx.inputToken.symbol} ({tx.inputToken.address})</p>\r\n                )}\r\n                {tx.outputToken && (\r\n                  <p>获得: {tx.outputToken.amount} {tx.outputToken.symbol} ({tx.outputToken.address})</p>\r\n                )}\r\n              </div>\r\n              <p className=\"signature\">交易签名: {tx.signature}</p>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}