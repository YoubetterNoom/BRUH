{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [tokenTransfers, setTokenTransfers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const parseTokenTransfers = tx => {\n      const transfers = [];\n      if (!tx.meta || !tx.blockTime) return transfers;\n      tx.transaction.message.instructions.forEach(instruction => {\n        if (instruction.program === 'spl-token' && instruction.parsed && instruction.parsed.type === 'transferChecked') {\n          var _tx$meta;\n          const {\n            info\n          } = instruction.parsed;\n          transfers.push({\n            signature: tx.transaction.signatures[0],\n            timestamp: tx.blockTime,\n            tokenAddress: info.mint,\n            amount: info.tokenAmount.uiAmount,\n            sender: info.authority,\n            receiver: info.destination,\n            status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? '失败' : '成功'\n          });\n        }\n      });\n      return transfers;\n    };\n    const monitorTransactions = async () => {\n      try {\n        setLoading(true);\n        const programPublicKey = new PublicKey(programId);\n        const signatures = await connection.getSignaturesForAddress(programPublicKey, {\n          limit: 20\n        });\n        const txs = await Promise.all(signatures.map(sig => connection.getParsedTransaction(sig.signature)));\n        const allTransfers = txs.filter(tx => tx !== null).flatMap(parseTokenTransfers);\n        setTokenTransfers(allTransfers);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    monitorTransactions();\n    const interval = setInterval(monitorTransactions, 10000);\n    return () => clearInterval(interval);\n  }, [programId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u4EE3\\u5E01\\u4EA4\\u6613\\u76D1\\u63A7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u52A0\\u8F7D\\u4E2D...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: tokenTransfers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u6682\\u65E0\\u4EE3\\u5E01\\u4EA4\\u6613\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this) : tokenTransfers.map((transfer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u7B7E\\u540D: \", transfer.signature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u65F6\\u95F4: \", new Date(transfer.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u4EE3\\u5E01\\u5730\\u5740: \", transfer.tokenAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u6570\\u91CF: \", transfer.amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u53D1\\u9001\\u65B9: \", transfer.sender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u63A5\\u6536\\u65B9: \", transfer.receiver]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u72B6\\u6001: \", transfer.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"izjtmt1luuOTErkSZgemRJi0J2Y=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useEffect","Connection","PublicKey","jsxDEV","_jsxDEV","TransactionMonitor","programId","_s","tokenTransfers","setTokenTransfers","loading","setLoading","connection","parseTokenTransfers","tx","transfers","meta","blockTime","transaction","message","instructions","forEach","instruction","program","parsed","type","_tx$meta","info","push","signature","signatures","timestamp","tokenAddress","mint","amount","tokenAmount","uiAmount","sender","authority","receiver","destination","status","err","monitorTransactions","programPublicKey","getSignaturesForAddress","limit","txs","Promise","all","map","sig","getParsedTransaction","allTransfers","filter","flatMap","error","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","transfer","index","Date","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n} from '@solana/web3.js';\r\n\r\ninterface TokenTransfer {\r\n  signature: string;\r\n  timestamp: number;\r\n  tokenAddress: string;\r\n  amount: number;\r\n  sender: string;\r\n  receiver: string;\r\n  status: string;\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [tokenTransfers, setTokenTransfers] = useState<TokenTransfer[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\r\n    \r\n    const parseTokenTransfers = (tx: ParsedTransactionWithMeta): TokenTransfer[] => {\r\n      const transfers: TokenTransfer[] = [];\r\n      \r\n      if (!tx.meta || !tx.blockTime) return transfers;\r\n\r\n      tx.transaction.message.instructions.forEach((instruction: any) => {\r\n        if (\r\n          instruction.program === 'spl-token' &&\r\n          instruction.parsed &&\r\n          instruction.parsed.type === 'transferChecked'\r\n        ) {\r\n          const { info } = instruction.parsed;\r\n          transfers.push({\r\n            signature: tx.transaction.signatures[0],\r\n            timestamp: tx.blockTime!,\r\n            tokenAddress: info.mint,\r\n            amount: info.tokenAmount.uiAmount,\r\n            sender: info.authority,\r\n            receiver: info.destination,\r\n            status: tx.meta?.err ? '失败' : '成功'\r\n          });\r\n        }\r\n      });\r\n\r\n      return transfers;\r\n    };\r\n\r\n    const monitorTransactions = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const programPublicKey = new PublicKey(programId);\r\n        \r\n        const signatures = await connection.getSignaturesForAddress(\r\n          programPublicKey,\r\n          { limit: 20 }\r\n        );\r\n\r\n        const txs = await Promise.all(\r\n          signatures.map((sig) =>\r\n            connection.getParsedTransaction(sig.signature)\r\n          )\r\n        );\r\n\r\n        const allTransfers = txs\r\n          .filter((tx): tx is ParsedTransactionWithMeta => tx !== null)\r\n          .flatMap(parseTokenTransfers);\r\n\r\n        setTokenTransfers(allTransfers);\r\n      } catch (error) {\r\n        console.error('Error fetching transactions:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    monitorTransactions();\r\n    const interval = setInterval(monitorTransactions, 10000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [programId]);\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <h2>代币交易监控</h2>\r\n      {loading ? (\r\n        <p>加载中...</p>\r\n      ) : (\r\n        <div className=\"transactions-list\">\r\n          {tokenTransfers.length === 0 ? (\r\n            <p>暂无代币交易</p>\r\n          ) : (\r\n            tokenTransfers.map((transfer, index) => (\r\n              <div key={index} className=\"transaction-item\">\r\n                <p>签名: {transfer.signature}</p>\r\n                <p>时间: {new Date(transfer.timestamp * 1000).toLocaleString()}</p>\r\n                <p>代币地址: {transfer.tokenAddress}</p>\r\n                <p>数量: {transfer.amount}</p>\r\n                <p>发送方: {transfer.sender}</p>\r\n                <p>接收方: {transfer.receiver}</p>\r\n                <p>状态: {transfer.status}</p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}