{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\chinmag\\\\src\\\\components\\\\TransactionMonitor.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getProgramName = instruction => {\n  if ('program' in instruction) {\n    return instruction.program;\n  }\n  if ('programId' in instruction) {\n    return instruction.programId.toString();\n  }\n  return 'Unknown';\n};\nconst getTokenMarketCap = async mintAddress => {\n  try {\n    var _priceData$data, _priceData$data$mintA;\n    console.log('Fetching market cap for:', mintAddress);\n    const priceResponse = await fetch(`https://price.jup.ag/v4/price?ids=${mintAddress}`);\n    const priceData = await priceResponse.json();\n    if (priceData !== null && priceData !== void 0 && (_priceData$data = priceData.data) !== null && _priceData$data !== void 0 && (_priceData$data$mintA = _priceData$data[mintAddress]) !== null && _priceData$data$mintA !== void 0 && _priceData$data$mintA.price) {\n      const price = priceData.data[mintAddress].price;\n      const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f');\n      const tokenSupply = await connection.getTokenSupply(new PublicKey(mintAddress));\n      if (tokenSupply.value.uiAmount) {\n        const marketCap = price * tokenSupply.value.uiAmount;\n        console.log('Calculated market cap:', marketCap);\n        return marketCap;\n      }\n    }\n  } catch (error) {\n    console.error('Error fetching market cap:', error);\n  }\n  return undefined;\n};\nconst getTokenInfo = async mintAddress => {\n  try {\n    console.log('Fetching token info for:', mintAddress);\n    const [tokenData, marketCap] = await Promise.all([fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mintAccounts: [mintAddress],\n        includeOffChain: true,\n        disableCache: false\n      })\n    }).then(res => res.json()), getTokenMarketCap(mintAddress)]);\n    console.log('Token metadata:', tokenData);\n    console.log('Market cap:', marketCap);\n    if (tokenData && tokenData[0]) {\n      const tokenInfo = {\n        address: mintAddress,\n        symbol: tokenData[0].symbol || 'Unknown',\n        name: tokenData[0].name || 'Unknown Token',\n        amount: 0,\n        marketCap: marketCap\n      };\n      console.log('Created token info:', tokenInfo);\n      return tokenInfo;\n    }\n  } catch (error) {\n    console.error('Error fetching token info:', error);\n  }\n  return null;\n};\nconst TransactionMonitor = ({\n  programId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processedSignatures] = useState(new Set());\n  const [uniqueTokens, setUniqueTokens] = useState(new Set());\n  const [autoRefreshInterval, setAutoRefreshInterval] = useState(null);\n  const cleanup = () => {\n    if (autoRefreshInterval) {\n      clearInterval(autoRefreshInterval);\n    }\n  };\n  useEffect(() => {\n    return cleanup;\n  }, []);\n  useEffect(() => {\n    cleanup();\n    setTransactions([]);\n    processedSignatures.clear();\n    setUniqueTokens(new Set());\n    monitorTransactions();\n    const interval = setInterval(() => {\n      if (!loading) {\n        monitorTransactions();\n      }\n    }, 10000);\n    setAutoRefreshInterval(interval);\n    return cleanup;\n  }, [programId]);\n  const monitorTransactions = useCallback(async () => {\n    if (loading) return;\n    try {\n      setLoading(true);\n      const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f', 'confirmed');\n      const programPublicKey = new PublicKey(programId);\n      const signatures = await connection.getSignaturesForAddress(programPublicKey, {\n        limit: 10\n      });\n      const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\n      if (newSignatures.length === 0) {\n        setLoading(false);\n        return;\n      }\n      const processedTokens = new Set();\n      const uniqueTxMap = new Map();\n      for (const sig of newSignatures) {\n        try {\n          const tx = await connection.getParsedTransaction(sig.signature, {\n            maxSupportedTransactionVersion: 0,\n            commitment: 'confirmed'\n          });\n          if (tx !== null && tx !== void 0 && tx.meta && tx.blockTime) {\n            const preTokenBalances = tx.meta.preTokenBalances || [];\n            const postTokenBalances = tx.meta.postTokenBalances || [];\n            const changedTokens = new Set([...preTokenBalances.map(b => b.mint), ...postTokenBalances.map(b => b.mint)]);\n            const newTokens = Array.from(changedTokens).filter(mint => !processedTokens.has(mint));\n            if (newTokens.length === 0) continue;\n            const tokenPromises = newTokens.map(async mint => {\n              if (!mint) return null;\n              processedTokens.add(mint);\n              return await getTokenInfo(mint);\n            });\n            const tokens = (await Promise.all(tokenPromises)).filter(t => t !== null).map(token => {\n              var _preTokenBalances$fin, _postTokenBalances$fi;\n              const preBal = ((_preTokenBalances$fin = preTokenBalances.find(b => b.mint === token.address)) === null || _preTokenBalances$fin === void 0 ? void 0 : _preTokenBalances$fin.uiTokenAmount.uiAmount) || 0;\n              const postBal = ((_postTokenBalances$fi = postTokenBalances.find(b => b.mint === token.address)) === null || _postTokenBalances$fi === void 0 ? void 0 : _postTokenBalances$fi.uiTokenAmount.uiAmount) || 0;\n              const change = postBal - preBal;\n              return {\n                ...token,\n                amount: Math.abs(change),\n                isInput: change < 0\n              };\n            });\n            if (tokens.length > 0) {\n              const inputTokens = tokens.filter(t => t.isInput);\n              const outputTokens = tokens.filter(t => !t.isInput);\n              if (inputTokens.length > 0 || outputTokens.length > 0) {\n                var _tx$meta;\n                const newTx = {\n                  signature: sig.signature,\n                  timestamp: tx.blockTime,\n                  status: (_tx$meta = tx.meta) !== null && _tx$meta !== void 0 && _tx$meta.err ? 'Failed' : 'Success',\n                  inputToken: inputTokens[0],\n                  outputToken: outputTokens[0],\n                  programName: getProgramName(tx.transaction.message.instructions[0])\n                };\n                if (!uniqueTxMap.has(sig.signature)) {\n                  uniqueTxMap.set(sig.signature, newTx);\n                  processedSignatures.add(sig.signature);\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Error processing transaction:', sig.signature, error);\n        }\n      }\n      if (uniqueTxMap.size > 0) {\n        setTransactions(prevTxs => {\n          const existingSignatures = new Set(prevTxs.map(tx => tx.signature));\n          const newTxs = Array.from(uniqueTxMap.values()).filter(tx => !existingSignatures.has(tx.signature)).filter((tx, index, self) => {\n            const isFirstOccurrence = !self.slice(0, index).some(prevTx => {\n              var _prevTx$inputToken, _prevTx$outputToken;\n              return tx.inputToken && ((_prevTx$inputToken = prevTx.inputToken) === null || _prevTx$inputToken === void 0 ? void 0 : _prevTx$inputToken.address) === tx.inputToken.address || tx.outputToken && ((_prevTx$outputToken = prevTx.outputToken) === null || _prevTx$outputToken === void 0 ? void 0 : _prevTx$outputToken.address) === tx.outputToken.address;\n            });\n            return isFirstOccurrence;\n          });\n          return [...newTxs, ...prevTxs];\n        });\n      }\n    } catch (error) {\n      console.error('Error in monitorTransactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [programId, processedSignatures, loading]);\n  const openPhotonLink = tokenAddress => {\n    window.open(`https://photon-sol.tinyastro.io/en/lp/${tokenAddress}`, '_blank');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-monitor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Transaction Monitor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"subtitle\",\n          children: \"Real-time Solana transaction tracking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"refresh-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: monitorTransactions,\n          disabled: loading,\n          className: \"refresh-button\",\n          children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this), \"Loading\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"refresh-icon\",\n              children: \"\\u21BB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), \"Manual Refresh\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-list\",\n      children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-transactions\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No transactions found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hint\",\n          children: \"Click refresh to check for new transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this) : transactions.map(tx => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transaction-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timestamp\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"label\",\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 19\n            }, this), new Date(tx.timestamp * 1000).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status ${tx.status === '成功' ? 'success' : 'failed'}`,\n            children: tx.status === '成功' ? 'Success' : 'Failed'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"swap-info\",\n          children: [tx.inputToken && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-info input-token\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"token-amount\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label\",\n                children: \"Paid:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"amount\",\n                children: tx.inputToken.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"symbol\",\n                children: tx.inputToken.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 21\n            }, this), typeof tx.inputToken.marketCap === 'number' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"market-cap\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label\",\n                children: \"Market Cap:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value\",\n                children: [\"$\", new Intl.NumberFormat('en-US', {\n                  notation: 'compact',\n                  maximumFractionDigits: 2\n                }).format(tx.inputToken.marketCap)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"photon-link-button\",\n              onClick: () => openPhotonLink(tx.inputToken.address),\n              children: [\"View on Photon LP\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"address\",\n                children: [\"(\", tx.inputToken.address, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 19\n          }, this), tx.outputToken && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-info output-token\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"token-amount\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label\",\n                children: \"Received:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"amount\",\n                children: tx.outputToken.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"symbol\",\n                children: tx.outputToken.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 21\n            }, this), typeof tx.outputToken.marketCap === 'number' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"market-cap\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label\",\n                children: \"Market Cap:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value\",\n                children: [\"$\", new Intl.NumberFormat('en-US', {\n                  notation: 'compact',\n                  maximumFractionDigits: 2\n                }).format(tx.outputToken.marketCap)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"photon-link-button\",\n              onClick: () => openPhotonLink(tx.outputToken.address),\n              children: [\"View on Photon LP\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"address\",\n                children: [\"(\", tx.outputToken.address, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }, this), tx.programName && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"program-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"label\",\n            children: \"Program:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 19\n          }, this), tx.programName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"signature\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"label\",\n            children: \"Transaction Signature:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value\",\n            children: tx.signature\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 15\n        }, this)]\n      }, tx.signature, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionMonitor, \"1zerkSH+hbaQfvZkAhv7T64PyNA=\");\n_c = TransactionMonitor;\nexport default TransactionMonitor;\nvar _c;\n$RefreshReg$(_c, \"TransactionMonitor\");","map":{"version":3,"names":["useState","useCallback","useEffect","Connection","PublicKey","jsxDEV","_jsxDEV","Fragment","_Fragment","getProgramName","instruction","program","programId","toString","getTokenMarketCap","mintAddress","_priceData$data","_priceData$data$mintA","console","log","priceResponse","fetch","priceData","json","data","price","connection","tokenSupply","getTokenSupply","value","uiAmount","marketCap","error","undefined","getTokenInfo","tokenData","Promise","all","method","headers","body","JSON","stringify","mintAccounts","includeOffChain","disableCache","then","res","tokenInfo","address","symbol","name","amount","TransactionMonitor","_s","transactions","setTransactions","loading","setLoading","processedSignatures","Set","uniqueTokens","setUniqueTokens","autoRefreshInterval","setAutoRefreshInterval","cleanup","clearInterval","clear","monitorTransactions","interval","setInterval","programPublicKey","signatures","getSignaturesForAddress","limit","newSignatures","filter","sig","has","signature","length","processedTokens","uniqueTxMap","Map","tx","getParsedTransaction","maxSupportedTransactionVersion","commitment","meta","blockTime","preTokenBalances","postTokenBalances","changedTokens","map","b","mint","newTokens","Array","from","tokenPromises","add","tokens","t","token","_preTokenBalances$fin","_postTokenBalances$fi","preBal","find","uiTokenAmount","postBal","change","Math","abs","isInput","inputTokens","outputTokens","_tx$meta","newTx","timestamp","status","err","inputToken","outputToken","programName","transaction","message","instructions","set","size","prevTxs","existingSignatures","newTxs","values","index","self","isFirstOccurrence","slice","some","prevTx","_prevTx$inputToken","_prevTx$outputToken","openPhotonLink","tokenAddress","window","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Date","toLocaleString","Intl","NumberFormat","notation","maximumFractionDigits","format","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/chinmag/src/components/TransactionMonitor.tsx"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  ParsedTransactionWithMeta,\r\n  ParsedInstruction,\r\n  PartiallyDecodedInstruction,\r\n} from '@solana/web3.js';\r\n\r\ninterface TokenInfo {\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  amount: number;\r\n  marketCap?: number;\r\n  isInput?: boolean;\r\n}\r\n\r\ninterface Transaction {\r\n  signature: string;\r\n  timestamp: number;\r\n  status: string;\r\n  inputToken?: TokenInfo;\r\n  outputToken?: TokenInfo;\r\n  programName?: string;\r\n}\r\n\r\ninterface SPLTokenInstruction {\r\n  program: string;\r\n  parsed: {\r\n    type: string;\r\n    info: {\r\n      mint: string;\r\n      tokenAmount: {\r\n        uiAmount: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\ninterface TransactionMonitorProps {\r\n  programId: string;\r\n}\r\n\r\nconst getProgramName = (instruction: ParsedInstruction | PartiallyDecodedInstruction): string => {\r\n  if ('program' in instruction) {\r\n    return instruction.program;\r\n  }\r\n  if ('programId' in instruction) {\r\n    return instruction.programId.toString();\r\n  }\r\n  return 'Unknown';\r\n};\r\n\r\nconst getTokenMarketCap = async (mintAddress: string) => {\r\n  try {\r\n    console.log('Fetching market cap for:', mintAddress);\r\n    const priceResponse = await fetch(`https://price.jup.ag/v4/price?ids=${mintAddress}`);\r\n    const priceData = await priceResponse.json();\r\n    \r\n    if (priceData?.data?.[mintAddress]?.price) {\r\n      const price = priceData.data[mintAddress].price;\r\n      \r\n      const connection = new Connection(\r\n        'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f'\r\n      );\r\n      const tokenSupply = await connection.getTokenSupply(new PublicKey(mintAddress));\r\n      \r\n      if (tokenSupply.value.uiAmount) {\r\n        const marketCap = price * tokenSupply.value.uiAmount;\r\n        console.log('Calculated market cap:', marketCap);\r\n        return marketCap;\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching market cap:', error);\r\n  }\r\n  return undefined;\r\n};\r\n\r\nconst getTokenInfo = async (mintAddress: string) => {\r\n  try {\r\n    console.log('Fetching token info for:', mintAddress);\r\n    const [tokenData, marketCap] = await Promise.all([\r\n      fetch('https://api.helius.xyz/v0/token-metadata?api-key=426605eb-af73-410a-af26-0dc37714935f', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          mintAccounts: [mintAddress],\r\n          includeOffChain: true,\r\n          disableCache: false\r\n        })\r\n      }).then(res => res.json()),\r\n      getTokenMarketCap(mintAddress)\r\n    ]);\r\n    \r\n    console.log('Token metadata:', tokenData);\r\n    console.log('Market cap:', marketCap);\r\n\r\n    if (tokenData && tokenData[0]) {\r\n      const tokenInfo = {\r\n        address: mintAddress,\r\n        symbol: tokenData[0].symbol || 'Unknown',\r\n        name: tokenData[0].name || 'Unknown Token',\r\n        amount: 0,\r\n        marketCap: marketCap\r\n      };\r\n      console.log('Created token info:', tokenInfo);\r\n      return tokenInfo;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching token info:', error);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst TransactionMonitor: React.FC<TransactionMonitorProps> = ({ programId }) => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [processedSignatures] = useState<Set<string>>(new Set());\r\n  const [uniqueTokens, setUniqueTokens] = useState<Set<string>>(new Set());\r\n  const [autoRefreshInterval, setAutoRefreshInterval] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  const cleanup = () => {\r\n    if (autoRefreshInterval) {\r\n      clearInterval(autoRefreshInterval);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return cleanup;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    cleanup();\r\n    setTransactions([]);\r\n    processedSignatures.clear();\r\n    setUniqueTokens(new Set());\r\n\r\n    monitorTransactions();\r\n\r\n    const interval = setInterval(() => {\r\n      if (!loading) {\r\n        monitorTransactions();\r\n      }\r\n    }, 10000);\r\n\r\n    setAutoRefreshInterval(interval);\r\n\r\n    return cleanup;\r\n  }, [programId]);\r\n\r\n  const monitorTransactions = useCallback(async () => {\r\n    if (loading) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      const connection = new Connection(\r\n        'https://mainnet.helius-rpc.com/?api-key=426605eb-af73-410a-af26-0dc37714935f',\r\n        'confirmed'\r\n      );\r\n\r\n      const programPublicKey = new PublicKey(programId);\r\n      \r\n      const signatures = await connection.getSignaturesForAddress(\r\n        programPublicKey,\r\n        { limit: 10 }\r\n      );\r\n\r\n      const newSignatures = signatures.filter(sig => !processedSignatures.has(sig.signature));\r\n      \r\n      if (newSignatures.length === 0) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const processedTokens = new Set<string>();\r\n      const uniqueTxMap = new Map<string, Transaction>();\r\n\r\n      for (const sig of newSignatures) {\r\n        try {\r\n          const tx = await connection.getParsedTransaction(sig.signature, {\r\n            maxSupportedTransactionVersion: 0,\r\n            commitment: 'confirmed'\r\n          });\r\n\r\n          if (tx?.meta && tx.blockTime) {\r\n            const preTokenBalances = tx.meta.preTokenBalances || [];\r\n            const postTokenBalances = tx.meta.postTokenBalances || [];\r\n            \r\n            const changedTokens = new Set([\r\n              ...preTokenBalances.map(b => b.mint),\r\n              ...postTokenBalances.map(b => b.mint)\r\n            ]);\r\n\r\n            const newTokens = Array.from(changedTokens).filter(mint => !processedTokens.has(mint));\r\n            \r\n            if (newTokens.length === 0) continue;\r\n\r\n            const tokenPromises = newTokens.map(async mint => {\r\n              if (!mint) return null;\r\n              processedTokens.add(mint);\r\n              return await getTokenInfo(mint);\r\n            });\r\n\r\n            const tokens = (await Promise.all(tokenPromises))\r\n              .filter((t): t is TokenInfo => t !== null)\r\n              .map(token => {\r\n                const preBal = preTokenBalances.find(b => b.mint === token.address)?.uiTokenAmount.uiAmount || 0;\r\n                const postBal = postTokenBalances.find(b => b.mint === token.address)?.uiTokenAmount.uiAmount || 0;\r\n                const change = postBal - preBal;\r\n                \r\n                return {\r\n                  ...token,\r\n                  amount: Math.abs(change),\r\n                  isInput: change < 0\r\n                };\r\n              });\r\n\r\n            if (tokens.length > 0) {\r\n              const inputTokens = tokens.filter(t => t.isInput);\r\n              const outputTokens = tokens.filter(t => !t.isInput);\r\n\r\n              if (inputTokens.length > 0 || outputTokens.length > 0) {\r\n                const newTx: Transaction = {\r\n                  signature: sig.signature,\r\n                  timestamp: tx.blockTime,\r\n                  status: tx.meta?.err ? 'Failed' : 'Success',\r\n                  inputToken: inputTokens[0],\r\n                  outputToken: outputTokens[0],\r\n                  programName: getProgramName(tx.transaction.message.instructions[0])\r\n                };\r\n\r\n                if (!uniqueTxMap.has(sig.signature)) {\r\n                  uniqueTxMap.set(sig.signature, newTx);\r\n                  processedSignatures.add(sig.signature);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing transaction:', sig.signature, error);\r\n        }\r\n      }\r\n\r\n      if (uniqueTxMap.size > 0) {\r\n        setTransactions(prevTxs => {\r\n          const existingSignatures = new Set(prevTxs.map(tx => tx.signature));\r\n          const newTxs = Array.from(uniqueTxMap.values())\r\n            .filter(tx => !existingSignatures.has(tx.signature))\r\n            .filter((tx, index, self) => {\r\n              const isFirstOccurrence = !self.slice(0, index).some(prevTx => \r\n                (tx.inputToken && prevTx.inputToken?.address === tx.inputToken.address) ||\r\n                (tx.outputToken && prevTx.outputToken?.address === tx.outputToken.address)\r\n              );\r\n              return isFirstOccurrence;\r\n            });\r\n          return [...newTxs, ...prevTxs];\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in monitorTransactions:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [programId, processedSignatures, loading]);\r\n\r\n  const openPhotonLink = (tokenAddress: string) => {\r\n    window.open(`https://photon-sol.tinyastro.io/en/lp/${tokenAddress}`, '_blank');\r\n  };\r\n\r\n  return (\r\n    <div className=\"transaction-monitor\">\r\n      <div className=\"monitor-header\">\r\n        <div className=\"title-section\">\r\n          <h2>Transaction Monitor</h2>\r\n          <span className=\"subtitle\">Real-time Solana transaction tracking</span>\r\n        </div>\r\n        <div className=\"refresh-container\">\r\n          <button \r\n            onClick={monitorTransactions} \r\n            disabled={loading}\r\n            className=\"refresh-button\"\r\n          >\r\n            {loading ? (\r\n              <>\r\n                <span className=\"loading-spinner\"></span>\r\n                Loading\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"refresh-icon\">↻</span>\r\n                Manual Refresh\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"transactions-list\">\r\n        {transactions.length === 0 ? (\r\n          <div className=\"no-transactions\">\r\n            <p>No transactions found</p>\r\n            <span className=\"hint\">Click refresh to check for new transactions</span>\r\n          </div>\r\n        ) : (\r\n          transactions.map((tx) => (\r\n            <div key={tx.signature} className=\"transaction-item\">\r\n              <div className=\"transaction-header\">\r\n                <div className=\"timestamp\">\r\n                  <span className=\"label\">Time:</span>\r\n                  {new Date(tx.timestamp * 1000).toLocaleString()}\r\n                </div>\r\n                <div className={`status ${tx.status === '成功' ? 'success' : 'failed'}`}>\r\n                  {tx.status === '成功' ? 'Success' : 'Failed'}\r\n                </div>\r\n              </div>\r\n              <div className=\"swap-info\">\r\n                {tx.inputToken && (\r\n                  <div className=\"token-info input-token\">\r\n                    <div className=\"token-amount\">\r\n                      <span className=\"label\">Paid:</span>\r\n                      <span className=\"amount\">{tx.inputToken.amount}</span>\r\n                      <span className=\"symbol\">{tx.inputToken.symbol}</span>\r\n                    </div>\r\n                    {typeof tx.inputToken.marketCap === 'number' && (\r\n                      <div className=\"market-cap\">\r\n                        <span className=\"label\">Market Cap:</span>\r\n                        <span className=\"value\">\r\n                          ${new Intl.NumberFormat('en-US', {\r\n                            notation: 'compact',\r\n                            maximumFractionDigits: 2\r\n                          }).format(tx.inputToken.marketCap)}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                    <button \r\n                      className=\"photon-link-button\"\r\n                      onClick={() => openPhotonLink(tx.inputToken!.address)}\r\n                    >\r\n                      View on Photon LP\r\n                      <span className=\"address\">({tx.inputToken.address})</span>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n                {tx.outputToken && (\r\n                  <div className=\"token-info output-token\">\r\n                    <div className=\"token-amount\">\r\n                      <span className=\"label\">Received:</span>\r\n                      <span className=\"amount\">{tx.outputToken.amount}</span>\r\n                      <span className=\"symbol\">{tx.outputToken.symbol}</span>\r\n                    </div>\r\n                    {typeof tx.outputToken.marketCap === 'number' && (\r\n                      <div className=\"market-cap\">\r\n                        <span className=\"label\">Market Cap:</span>\r\n                        <span className=\"value\">\r\n                          ${new Intl.NumberFormat('en-US', {\r\n                            notation: 'compact',\r\n                            maximumFractionDigits: 2\r\n                          }).format(tx.outputToken.marketCap)}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                    <button \r\n                      className=\"photon-link-button\"\r\n                      onClick={() => openPhotonLink(tx.outputToken!.address)}\r\n                    >\r\n                      View on Photon LP\r\n                      <span className=\"address\">({tx.outputToken.address})</span>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {tx.programName && (\r\n                <div className=\"program-name\">\r\n                  <span className=\"label\">Program:</span>\r\n                  {tx.programName}\r\n                </div>\r\n              )}\r\n              <div className=\"signature\">\r\n                <span className=\"label\">Transaction Signature:</span>\r\n                <span className=\"value\">{tx.signature}</span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}